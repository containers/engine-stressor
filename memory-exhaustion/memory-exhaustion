#!/bin/bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Function to start a new container with the memory exhaustion script
exec_into_container() {
    container_name=$1
    shift
    command=$@
    sudo podman exec "$container_name" /bin/sh -c "$command"
}

start_initial_container() {

    rm -f /tmp/container_os.img
    # Create a file to be used as a loopback device
    echo "INFO: Creating a disk image file"
    dd if=/dev/zero of="/tmp/container_os.img" bs=1G count=1

    # Format the file as a filesystem
    echo "INFO: Formatting the disk image file"
    mkfs.ext4 "/tmp/container_os.img"
    
    # Create a mount point and mount the loopback device
    echo "INFO: Creating a mount point and mounting the disk image"
    mkdir -p "/mnt/container_mem_test"
    mount -o loop "/tmp/container_os.img" "/mnt/container_mem_test"

    mkdir -p /mnt/container_mem_test/usr/local/bin/
    mkdir -p /mnt/container_mem_test/etc
    echo "export PATH=/mnt/test_volume/bin:\$PATH" >> /mnt/container_mem_test/etc/profile
    echo "export LD_LIBRARY_PATH=/mnt/test_volume/lib:/mnt/test_volume/lib64:\$LD_LIBRARY_PATH" >> /mnt/container_mem_test/etc/profile

    mkdir -p /mnt/container_mem_test/root
    echo "export PATH=/mnt/test_volume/bin:\$PATH" >> /mnt/container_mem_test/root/.bashrc
    echo "export LD_LIBRARY_PATH=/mnt/test_volume/lib:/mnt/test_volume/lib64:\$LD_LIBRARY_PATH" >> /mnt/container_mem_test/root/.bashrc

    curl -L -o /mnt/container_mem_test/usr/local/bin/exhaustion-memory-engine-stressor https://raw.githubusercontent.com/containers/engine-stressor/main/memory-exhaustion/exhaustion-memory-engine-stressor && chmod +x /mnt/container_mem_test/usr/local/bin/exhaustion-memory-engine-stressor

    # Ensure the disk image is unmounted on script exit
    trap 'umount /mnt/container_mem_test && rm -f /tmp/container_os.img' EXIT

    # Read OS information from /etc/os-release
    #source /etc/os-release
    #
    # Check if the OS is CentOS or RHEL and the version is 9 or higher
    #if [[ "$ID" =~ ^(rhel|centos)$ && "${VERSION_ID%%.*}" -ge 9 ]]; then
    #    echo "INFO: RHEL or CentOS 9 or higher detected. Creating necessary directories for volume mounts..."
    #    sudo mkdir -p /var/tmp/varlog /var/tmp/dnf-cache /var/tmp/dnf-lib /var/tmp/rpm
    #
    #    VOLUME_OPTS="--volume /var/tmp/varlog:/var/log:Z \
    #                 --volume /var/tmp/dnf-cache:/var/cache/dnf:Z \
    #                 --volume /var/tmp/dnf-lib:/var/lib/dnf:Z \
    #                 --volume /var/tmp/rpm:/var/lib/rpm:Z"
    #else
    #    echo "INFO: OS is not RHEL or CentOS 9 or higher. Skipping volume mounts."
    #    VOLUME_OPTS=""
    #fi

    echo "INFO: Starting initial container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"
    # Construct the podman command as a string
    PODMAN_CMD="sudo podman run -d --privileged \
    --name \"$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME\" \
    --replace \
    -v /etc/containers/networks:/etc/containers/networks:ro \
    -v /mnt/container_mem_test:/mnt/test_volume \
    $VOLUME_OPTS \
    -e MEMORY_EXHAUSTION_BASE_CONTAINER_NAME=\"$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME\" \
    -e MEMORY_EXHAUSTION_BASE_CONTAINER_MEMORY_LIMIT=\"$MEMORY_EXHAUSTION_BASE_CONTAINER_MEMORY_LIMIT\" \
    -e IMAGE_NAME_CONTAINER=\"$IMAGE_NAME_CONTAINER\" \
    -e MEMORY_EXHAUSTION_BASE_CONTAINER_STRESS_NG_TIMEOUT=\"$MEMORY_EXHAUSTION_BASE_CONTAINER_STRESS_NG_TIMEOUT\" \
    -e MEMORY_EXHAUSTION_BASE_CONTAINER_THRESHOLD_PERCENT=\"$MEMORY_EXHAUSTION_BASE_CONTAINER_THRESHOLD_PERCENT\" \
    -e MEMORY_EXHAUSTION_BASE_CONTAINER_STRESS_NG_VM=\"$MEMORY_EXHAUSTION_BASE_CONTAINER_STRESS_NG_VM\" \
    -e MEMORY_EXHAUSTION_BASE_CONTAINER_STRESS_NG_VM_METHOD=\"$MEMORY_EXHAUSTION_BASE_CONTAINER_STRESS_NG_VM_METHOD\" \
    \"$IMAGE_NAME_CONTAINER\" sleep infinity"

    # Echo the command to the screen
    echo "Executing: $PODMAN_CMD"

    # Execute the command
    eval $PODMAN_CMD

    echo "====== DEBUG INSPECT PODMAN ========"
    sudo podman inspect "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"
    echo "====== DEBUG INSPECT PODMAN ========"

    echo "INFO: Waiting for the container to be fully started..."
    for i in {1..10}; do
        if sudo podman ps --filter "name=$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" --filter "status=running" | grep -q "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"; then
            echo "INFO: Container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME is running."
            break
        fi
        echo "INFO: Waiting for container to start... ($i/10)"
        sleep 1
    done

    if ! sudo podman ps --filter "name=$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" --filter "status=running" | grep -q "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"; then
        echo "ERROR: Container did not start in time."
        return 1
    fi

    echo "INFO: Installing dependencies in the container"
    exec_into_container "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" "rpm -qa --queryformat '%{SIZE} %{name}-%{version}-%{release}.%{arch}\n' | sort -n -r | numfmt --to=iec-i --suffix=B --padding=7"

    exec_into_container "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" "df -h"

    exec_into_container "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" "dnf install --installroot=/mnt/test_volume --releasever=\$(source /etc/os-release && echo \$VERSION_ID) -y stress-ng procps-ng"

    echo "====  DEBUG free ====================="
    free -hg
    echo "====  DEBUG free ====================="

    echo "====  DEBUG df ====================="
    df -h
    echo "====  DEBUG df ====================="

    # make sure we do the pull before the stress happens - to avoid issues with network
    echo "INFO: Executing podman pull before stress script..."
    podman exec -it "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" podman pull quay.io/podman/stable

    echo "INFO: Running the stressor script"
    podman exec -it "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" /bin/bash -c "source /mnt/test_volume/root/.bashrc && cd /var/tmp/ && /mnt/test_volume/usr/local/bin/exhaustion-memory-engine-stressor"

    # Generating 10G file
    podman exec -it "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" /bin/bash -c "source /mnt/test_volume/root/.bashrc && cd /var/tmp/ && dd if=/dev/zero of=/var/tmp/largefile bs=1G count=10"
}

# Function to get memory usage of a container as a percentage
# Arguments:
#   container_name: The name of the container
get_memory_usage() {
    local container_name=$1
    podman stats \
        --no-stream \
	--format "{{.MemPerc}}" \
	"$container_name" | sed 's/%//'
}

# Function to create additional containers inside the initial container
# Arguments:
#   container_name: The name of the initial container
create_additional_containers() {
    local container_name=$1
    echo "INFO: Creating additional containers inside $container_name"
    for i in $(seq 1 "$NUMBER_OF_CONTAINERS"); do
        local additional_container_name="${container_name}_nested_$i"

	local run_cmd="podman run -d \
                         --name \"$additional_container_name\" \
                         --net=host \
                         --privileged \
                         $IMAGE_NAME_CONTAINER \
                         sleep infinity"

        echo "INFO: Running nested container $additional_container_name inside $container_name with image $IMAGE_NAME_CONTAINER"
        echo "INFO: $run_cmd"
        if ! sudo podman exec "$container_name" sh -c "$run_cmd"; then
            echo "ERROR: Failed to run nested container $additional_container_name inside $container_name"
            handle_error
        fi
        echo "INFO: Started nested container $additional_container_name inside $container_name"
    done
}

# Function to stop and remove the nested containers
cleanup_nested_containers() {
    echo "INFO: Cleaning up nested containers"
    for i in $(seq 1 $NUMBER_OF_CONTAINERS); do
        local additional_container_name="${MEMORY_EXHAUSTION_BASE_CONTAINER_NAME}_nested_$i"
        if podman exec "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" podman stop -t0 "$additional_container_name" && podman exec "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" podman rm "$additional_container_name" --force; then
            echo "INFO: Nested container $additional_container_name stopped and removed successfully"
        else
            echo "ERROR: Failed to stop and remove nested container $additional_container_name"
            exit 1
        fi
    done
}

# Function to stop and remove the initial container
cleanup_initial_container() {
    echo "INFO: Cleaning up container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"

    STOP_CONTAINER_CMD="podman stop \"$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME\""
    REMOVE_CONTAINER_CMD="podman rm \"$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME\" --force"

    if eval "$STOP_CONTAINER_CMD"; then
        echo "INFO: Container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME stopped successfully"
    else
        echo "ERROR: Failed to stop container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"
        exit 1
    fi

    if eval "$REMOVE_CONTAINER_CMD"; then
        echo "INFO: Container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME removed successfully"
    else
        echo "ERROR: Failed to remove container $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"
        exit 1
    fi
}

# Function to cleanup everything and exit with an error code
handle_error() {
    cleanup_nested_containers
    cleanup_initial_container
    exit 1
}

memory_exhaustion_test() {
    # Constants
    local TIMEOUT=1500  # 25 minutes in seconds

    # Start the initial container
    start_initial_container &

    # Main monitoring loop
    SECONDS=0
    while [ $SECONDS -lt $TIMEOUT ]; do
        # Get the list of current containers and count them
        container_list=$(podman ps --format "{{.Names}}" 2>/dev/null)
        container_count=$(echo "$container_list" | wc -l)

        # Check if the container list is empty
        if [ -z "$container_list" ]; then
            echo "INFO: List of current containers: (0)"
        else
            echo "INFO: List of current containers: ($container_count) $container_list"
        fi

        # Get current memory usage of the initial container
        current_usage=$(get_memory_usage "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME" 2>/dev/null)

        # Check if current_usage is empty or nothing returned
        if [ -z "$current_usage" ]; then
            echo "INFO: No memory usage data returned for $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME. Continuing to sleep."
            sleep 1
            continue
        fi

        echo "INFO: Current memory usage of $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME: $current_usage%"

        # Check if memory usage exceeds threshold
        if [ "$(echo "$current_usage >= $MEMORY_EXHAUSTION_BASE_CONTAINER_THRESHOLD_PERCENT" | bc)" -eq 1 ]; then
            echo "INFO: Memory usage of $MEMORY_EXHAUSTION_BASE_CONTAINER_NAME exceeded threshold of $MEMORY_EXHAUSTION_BASE_CONTAINER_THRESHOLD_PERCENT%"
            if create_additional_containers "$MEMORY_EXHAUSTION_BASE_CONTAINER_NAME"; then
                echo "INFO: All nested containers started successfully"
                sleep ${MEMORY_EXHAUSTION_BASE_CONTAINER_WAIT_TIME_BEFORE_STOPPING_NESTED_CONTAINERS_IN_SEC}
                cleanup_nested_containers
                cleanup_initial_container
                echo "PASS: Memory exhaustion test completed successfully"
                exit 0
            else
                echo "ERROR: Failed to start nested containers"
                handle_error
            fi
        fi

        # Sleep for a short period before checking memory usage again
        sleep 1
    done

    # If the timeout is reached
    echo "INFO: Memory exhaustion test timed out after 25 minutes."
    cleanup_initial_container
    echo "FAIL: Memory exhaustion test did not complete within the timeout period"
    exit 1
}

# example of usage
# memory_exhaustion_test "memory-exhaustion-test"
